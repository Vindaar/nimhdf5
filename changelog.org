* v0.4.1
- adds missing import of =os.`/`= in =datasets.nim=, which got removed
  in the refactor
- fixes a regression in =open= for datasets in the case of a not
  existing dataset
* v0.4.0
- *major* change: introduce multiple different distinct types for the
  different usages of =hid_t= in the HDF5 library. This gives us more
  readability, type safety etc. We can write proper type aware =close=
  procedures etc.
- also adds ~=destroy~ hooks for all relevant types, so manual closing
  is not required anymore (unless one wishes to close early)
- *breaking*: iterators taking a =depth= argument now treat it
  differently. A depth of 0 now means *only the same level* where
  previously it meant *all levels*. The previous behavior is available
  via ~depth = -1~. The default behavior has not changed though.
- *breaking*: renames the =shape_raw= and =dset_raw= arguments of =create_dataset= to
  simply =shape= and =dset=. The purpose of the =_raw= suffix is completely
  unimportant for a user of the library.
- improve output of pretty printing of datasets, groups and files
- add tests for iterators and =contains= procedure
* v0.3.16
- refactor out pretty printing, iterators, some attribute related code
  into their own files
- move constructors into =datatypes.nim=, as they don't depend on
  other things and are often useful in other modules (better
  separation, less recursive imports)
- move a lot of features into =h5util= that may be used commonly
  between modules
- fixes issue with iterator for groups, which could cause to not find
  any datasets in a group, despite them existing
* v0.3.15
- fix segmentation fault in =visit_file= for C++ backend
* v0.3.14
- fix =H5Attributes= return values for =[]= template returning
  =AnyKind=
- change =[]=, ~[]=~ templates for =H5Attribtutes= into procs
- fix the high level example to at least make it compile  
* v0.3.13
- =visit_file= now does not open all groups and datasets anymore. Only
  recognizes which groups / files actually exist
- adds =close= for dataset / groups. Both are now aware if they are
  open or not
- add a string conversion for =H5Attr=
- fix accessing a dataset from a group. Now uses the path of the group
  as the base
- fix error message in =read_hyperslab_vlen=
- turn some templates into procs
- make =blosc= an optional import
* v0.3.12
- =H5File= as a proc is deprecated and replaced by =H5open=!
- reading of string attributes now takes care to check if they are
  variable length or fixed length strings
- import of =blosc= plugin is not automatic anymore, but needs to be
  done manually by compiling with =-d:blosc= 
- remove a lot old comments and imports from days past...
* v0.3.11
- change usage of =csize= to =csize_t= in full wrapper / library. For
  most use cases this did not have any effect (=csize= was an int,
  instead of unsigned). But for =H5T_VARIABLE = csize.high= this
  caused problems, because the value was not the one expected
  (=csize_t.high=)
- add support for compound datatypes. Creating a dataset / writing and
  reading data works for any objects `T` which have fields that can be
  stored in HDF5 files currently. 
  Objects and tuples are treated the same!
- add support for =seq[string]= attributes
- reorder =datasets.nim= and clean up =[]= logic
- add =[]= accessor from a =H5Group=
- add =isVlen= helper to check if dataset is variable length
- make =special_type= usage optional when reading datasets
- fix branching in =nimToH5type= to be fully compile time
- add =H5File= to replace =H5FileObj= (latter is kept as deprecated
  typedef)
- variable lenght data is created automatically if user gives =seq[T]=
  type in =create_dataset=
- =read= can automatically read variable length data if =seq[T]=
  datatype is given
- add tests for compound data and =seq[string]= attributes
* v0.3.10
- change =dtypeAnyKind= definition when creating dataset
- improve iteration over subgroups / datasets
* v0.3.9
- fix mapping of H5 types to Nim types, see PR #36.

* v0.3.8

- remove dependency of =typetraits= and =typeinfo= modules by
  introducing custom =DtypeKind enum=
